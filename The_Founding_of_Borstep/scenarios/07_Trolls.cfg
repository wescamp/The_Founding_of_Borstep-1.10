#textdomain wesnoth-The_Founding_of_Borstep

# There is an event that needs to fire when the flesh golem is revealed.
# The "sighted" event type doesn't work reliably, so there are some events that
# replicate the functionality of that event (at least in this case). The
# GOLEM_REVEALED macro and the two following events are the ones that do this.

[scenario]
	[music]
		play_once=yes
		name=knalgan_theme.ogg
	[/music]

	[story]
		[part]
			story= _ "The orcs slipped into the cave and heaved the door closed behind them, safe, now from any retalliation of the surviving elves. Even after their eyes adjusted to the gloom, the orcs couldn't see any trolls nearby, but they could hear shuffling, grunting, and scraping. Apparently, the cavern was well populated, so the orcs bared their teeth and prepared for battle, but this time they did it quietly."
		[/part]
		
		[part]
			background=early_farnorth.jpg
			show_title=yes
			{OLD_BATTLE 732 232}
			{OLD_JOURNEY 748 249}
			{OLD_JOURNEY 755 271}
			{OLD_BATTLE 754 297}
			{OLD_JOURNEY 755 319}
			{OLD_JOURNEY 743 336}
			{OLD_BATTLE 732 355}
			{OLD_JOURNEY 746 373}
			{OLD_JOURNEY 768 386}
			{OLD_JOURNEY 786 403}
			{OLD_JOURNEY 793 426}
			{OLD_JOURNEY 798 450}
			{OLD_JOURNEY 795 474}
			{OLD_JOURNEY 782 494}
			{OLD_BATTLE 768 516}
			{OLD_BATTLE 742 514}
			{OLD_JOURNEY 726 495}
			{OLD_JOURNEY 717 475}
			{OLD_JOURNEY 701 459}
			{OLD_JOURNEY 682 446}
			{OLD_BATTLE 669 429}
			{NEW_BATTLE 665 418}
		[/part]
	[/story]
	
	name= _ "Trolls"
	map_data="{~add-ons/The_Founding_of_Borstep/maps/Trolls.map}"

	id=Trolls
	next_scenario=Underground_Lake

	{TURNS4 33 33 36 39}
	{UNDERGROUND}
	{PLAYLIST}

	[event]
		name=prestart

		[objectives]
			side=1
			[objective]
				description= _ "Defeat enemy leaders."
				condition=win
			[/objective]
			
			{HOW_TO_LOSE_2}
			
			note={EARLY_FINISH_BONUS_NOTE}+{NEW_GOLD_CARRYOVER_NOTE_40}
		[/objectives]

		{RECALL_LOYAL_UNITS}
		
		[item]
			image=items/blue_rune.png
			x,y=7,8
		[/item]
		[item]
			image=items/parchment.png
			x,y=3,15
		[/item]
		[item]
			image=items/chest.png
			x,y=6,3
		[/item]
		[set_variable]
			name=golem_seen
			value=no
		[/set_variable]
		[set_variable]
			name=orcs_seen
			value=no
		[/set_variable]
	[/event]

	[side]
		{SIDE_1}
		#wmllint recognize Krag-Ubor
		{GOLD4 250 200 200 200}
		shroud=yes
	[/side]

	[side]
		side=2
		team_name=trolls
		user_team_name= _ "Trolls"
		name=Nuk Thoh
		id=Nuk Thoh
		type=Troll Rocklobber
		canrecruit=yes
		recruit=Troll Whelp, Troll Rocklobber
		[ai]
			recruitment_pattern=mixed fighter, mixed fighter, fighter
		[/ai]
		{INCOME4 6 10 12 14}
		{GOLD4 120 140 160 180}
	[/side]

	[side]
		side=3
		team_name=trolls
		user_team_name= _ "Trolls"
		name=Gulg
		id=Gulg
		type=Troll Warrior
		canrecruit=yes
		recruit=Troll Whelp, Troll
		{INCOME4 4 10 14 18}
		{GOLD4 220 300 375 450}
	[/side]
	
	[side]
		side=4
		team_name=trolls
		user_team_name= _ "Trolls"
		name=Utsok
		id=Utsok
		type=Troll Warrior
		canrecruit=yes
		recruit=Troll Whelp, Troll, Troll Shaman
		{INCOME4 6 10 14 18}
		{GOLD4 180 300 375 450}
	[/side]

#ifdef EASY
	{LIMIT_RECRUITS 2 (Troll Rocklobber) 2}
	{LIMIT_RECRUITS 3 (Troll) 6}
	{LIMIT_CONTEMPORANEOUS_RECRUITS 4 (Troll Shaman) 2}
#endif
#ifdef NORMAL
	{LIMIT_RECRUITS 2 (Troll Rocklobber) 2}
	{LIMIT_RECRUITS 3 (Troll) 8}
	{LIMIT_CONTEMPORANEOUS_RECRUITS 4 (Troll Shaman) 3}
#endif
#ifdef HARD
	{LIMIT_RECRUITS 2 (Troll Rocklobber) 3}
	{LIMIT_RECRUITS 3 (Troll) 11}
	{LIMIT_CONTEMPORANEOUS_RECRUITS 4 (Troll Shaman) 4}
#endif
#ifdef NIGHTMARE
	{LIMIT_RECRUITS 2 (Troll Rocklobber) 4}
	{LIMIT_RECRUITS 3 (Troll) 14}
	{LIMIT_CONTEMPORANEOUS_RECRUITS 4 (Troll Shaman) 4}
#endif

	[side]
		side=5
		no_leader=yes
		team_name=orcs
		[unit]
			type=Flesh Golem
			x,y=10,9
			id=Flesh_Golem
			[modifications]
				{TRAIT_LOYAL}
			[/modifications]
			overlays="misc/loyal-icon.png"
		[/unit]
	[/side]

	[side]
		side=6
		no_leader=yes
		team_name=trolls
		user_team_name= _ "Bats"
		[ai]
			# The bats shouldn't fly to the magic rune, or attack the golem
			# (before he's freed):
			[avoid]
				x=7, 9, 9, 10, 10, 11, 11
				y=8, 9, 10, 8, 10, 9, 10
			[/avoid]
			village_value=0
			aggression=1
			caution=0
		[/ai]
	[/side]
	
	[side]
		side=7
		no_leader=yes
		team_name=angry
		[unit]
			type=Yeti
			x,y=33,19
			id=Yeti
			ai_special=guardian
		[/unit]
	[/side]
	
	{STARTING_VILLAGES 1 4}
	{STARTING_VILLAGES 2 5}
	{STARTING_VILLAGES 3 5}
	{STARTING_VILLAGES 4 5}

	# This event adds a number of bats to map. The outer while loop counts the
	# bats as they are added. The inner while loop keeps picking locations until
	# a good one is found. (There are several conditions.)
	[event]
		name=prestart
		# The number of bats depends on the difficulty:
		[set_variable]
			name=number_of_bats
#ifdef EASY
			value=10
#endif
#ifdef NORMAL
			value=16
#endif
#ifdef HARD
			value=20
#endif
#ifdef NIGHTMARE
			value=26
#endif
		[/set_variable]

		[set_variable]
			name=loop
			value=0
		[/set_variable]
		# The location starts out with a code meaning "find another location":
		[set_variable]
			name=bat_x
			value=-999
		[/set_variable]
		
		# Repeat $number_of_bats times:
		[while]
			[variable]
				name=loop
				less_than=$number_of_bats
			[/variable]

			[do]
				# While "x and y don't correspond to a good location"
				[while]
					# Pick a new location if:
					# ...x has been reset...
					[variable]
						name=bat_x
						equals=-999
					[/variable]
					
					# ...or if x and y are too close to the player's keep...
					[or]
						[variable]
							name=bat_x
							greater_than=20
						[/variable]
						[and]
							[variable]
								name=bat_y
								greater_than=22
							[/variable]
						[/and]
					[/or]
					
					# ...or if the location is on top of something else...
					[or]
						[have_location]
							x=$bat_x
							y=$bat_y
							terrain=Xu,Ms,Ha
							 # (cave walls, and snow mountains and hills)
							 
							[or]
								x=$bat_x
								y=$bat_y
								[filter]
								[/filter]  # There's already a unit there.
							[/or]

 							[or]
								x=10
								y=9
								[and]
									x=$bat_x
									y=$bat_y
									radius=2  # Too close to the golem
								[/and]
 							[/or]
							
							[or]
								terrain=K*
								[and]
									x=$bat_x
									y=$bat_y
									radius=3  # Too close to a keep.
								[/and]
							[/or]
						[/have_location]
					[/or]
					
					[do]
						# Pick a random location x and y
						[set_variable]
							name=bat_x
							rand=7..33
						[/set_variable]
						[set_variable]
							name=bat_y
							rand=1..33
						[/set_variable]
						# Loop back around to check the random location to see if
						# it is any good:
					[/do]
				[/while]
				
				# At this point, a good location has been found, so we'll make
				# a bat.

				# The first 16 bats are level 0, and the rest are level 1. That
				# way, the number of level 1 bats goes up with the difficulty:
				[if]
					[variable]
						name=loop
						greater_than=16
					[/variable]
					[then]
						[set_variable]
							name=bat_type
							value=Blood Bat
						[/set_variable]
					[/then]
					[else]
						[set_variable]
							name=bat_type
							value=Vampire Bat
						[/set_variable]
					[/else]
				[/if]
				
				[unit]
					type=$bat_type
					x=$bat_x
					y=$bat_y
					side=6
					ai_special=guardian
				[/unit]

				# Set a code to tell the while loop to find another location:
				[set_variable]
					name=bat_x
					value=-999
				[/set_variable]
				# Increment the loop counter:
				[set_variable]
					name=loop
					add=1
				[/set_variable]
			[/do]
		[/while]
		
		# Clean up:
		[clear_variable]
			name=loop
		[/clear_variable]
		[clear_variable]
			name=bat_x
		[/clear_variable]
		[clear_variable]
			name=bat_y
		[/clear_variable]
		[clear_variable]
			name=bat_type
		[/clear_variable]
	[/event]

	[event]
		name=moveto
		[filter]
			x,y=6,3
			side=1
		[/filter]

		[set_variable]
			name=treasure
#ifdef EASY
			value=95
#endif
#ifdef NORMAL
			value=95
#endif
#ifdef HARD
			value=125
#endif
#ifdef NIGHTMARE
			value=185
#endif
		[/set_variable]

		[sound]
			name=gold.ogg
		[/sound]
		[gold]
			side=1
			amount=$treasure
		[/gold]
		[message]
			speaker=narrator
			message= _ "You receive $treasure gold."
			image=wesnoth-icon.png
		[/message]
		[removeitem]
			x,y=6,3
		[/removeitem]
		[clear_variable]
			name=treasure
		[/clear_variable]
	[/event]

	[event]
		name=moveto
		
		[filter]
			side=1
			x=7,  7
			y=17, 18
		[/filter]

		[message]
			speaker=unit
			message= _ "Look! There's a little tunnel back here."
		[/message]
		
		[terrain]
			x,y=6,17
			terrain=Uh
		[/terrain]
	[/event]

# This macro can be called from two different events. The player can see it by
# moving close enough or by finding a map. (Those events follow the macro.)
#define GOLEM_REVEALED
	[if]
		[variable]
			name=golem_seen
			not_equals=yes
		[/variable]
		[then]
			[scroll_to]
				x,y=10,9
			[/scroll_to]
			[delay]
				time=500
			[/delay]
			[if]
				[variable]
					name=unit.id
					not_equals=Durguld
				[/variable]
				[then]
					[message]
						speaker=unit
						message= _ "Hey, what in the world is that thing on the platform?"
					[/message]
				[/then]
			[/if]
			[message]
				speaker=Durguld
				message = _ "That be a golem I reckon, but I've nae heard o' golems made from flesh; only from stone. How long has it been trapped there, I cannae guess."
			[/message]
			[set_variable]
				name=golem_seen
				value=yes
			[/set_variable]
		[/then]
	[/if]
#enddef

	# If the player finds a map, the shroud is removed:
	[event]
		name=moveto
		
		[filter]
			side=1
			x,y=3,15
		[/filter]
		
		[removeitem]
			x,y=3,15
		[/removeitem]
		[message]
			speaker=unit
			message= _ "I found a map of this cavern!"
		[/message]
		[remove_shroud]
			side=1
			x=0-36
			y=0-34
		[/remove_shroud]
		
		{GOLEM_REVEALED}
	[/event]
	
	# This fires if the player can see the golem:
	[event]
		name=moveto
		first_time_only=no
		
		[if]
			[have_unit]
				id=Flesh_Golem
				[filter_vision]
					visible=yes
					viewing_side=1
				[/filter_vision]
			[/have_unit]
			[then]
				{GOLEM_REVEALED}
			[/then]
		[/if]
		
		# If you don't allow undo, "Delay shroud updates" does not work.
		[allow_undo]
		[/allow_undo]
	[/event]

	[event]
		name=attack
		
		[filter]
			race=bats
		[/filter]
		
		[message]
			speaker=$second_unit.id
			message= _ "Why are the bats attacking us and not the trolls?"
		[/message]
		[if]
			[have_unit]
				id=Erogrik
			[/have_unit]
			[then]
				[message]
					speaker=Erogrik
					message= _ "They're vampire bats. Do trolls even have blood?"
				[/message]
			[/then]
			[else]
				[message]
					speaker=Durguld
					message= _ "They be vampire bats. I do not ken what trolls use for blood."
				[/message]
			[/else]
		[/if]
	[/event]

	# This event fires when the player sees a troll for the first time. It chooses
	# some trolls to say a few words. It might make more sense to fire this when a
	# troll sees the player for the first time, but that would be true immediately
	# because the AI ignores shroud.
	[event]
		name=moveto
		first_time_only=no
		
		[filter]
			[not]
				race=bats
			[/not]
		[/filter]
		
		[if]
			[variable]
				name=orcs_seen
				not_equals=yes
			[/variable]
			[and]
				[have_unit]
					race=troll
					[filter_vision]
						visible=yes
						viewing_side=1
					[/filter_vision]
				[/have_unit]
			[/and]
			
			[then]
				{NEAREST_UNIT $x1 $y1 race=troll generic_troll1}
				[message]
					speaker=$generic_troll1.id
					message= _ "We under attack!"
				[/message]

				# It would be nice to reuse the troll variable here, but that
				# doesn't work.
				{NEAREST_UNIT $generic_troll1.x $generic_troll1.y race=troll generic_troll2}
				[message]
					speaker=$generic_troll2.id
					message= _ "Good! Me hungry."
				[/message]
				[message]
					speaker=Nuk Thoh
					message= _ "The rock tosser clan will crush!"
				[/message]
				[clear_variable]
					name=generic_troll1
				[/clear_variable]
				[clear_variable]
					name=generic_troll2
				[/clear_variable]
				[set_variable]
					name=orcs_seen
					value=yes
				[/set_variable]
			[/then]
		[/if]

		[allow_undo]
		[/allow_undo]
	[/event]
	
# Causes a glowing light to cover the hexes where the bridge appears, while
# lightning flashes in front of it. DIRECTION controlls whether the light is
# getting larger and brighter, or smaller and fainter. It needs to be 1 or -1. (The
# three variables should be initialized before calling this macro.)
#define DO_BRIDGE_EFFECT DIRECTION
	[do]
		[set_variable]
			name=count
			add=1
		[/set_variable]
		[set_variable]
			name=opacity
			add="$(5 * {DIRECTION})"
		[/set_variable]
		[set_variable]
			name=size
			add="$(5* {DIRECTION})"
		[/set_variable]
		
		[removeitem]
			x,y=12,10
		[/removeitem]
		# Draw the glowing light:
		[item]
			halo=bridge_glow.png~SCALE($size, $size)~O($opacity%)
			x,y=12,10
		[/item]
		# Draw the lightning:
		[item]
			# The lightning image changes every *other* time through this loop.
			# The expression with $count in the following line evaluates
			# to 1, 1, 2, 2, 3, 3, 1, 1, 2, 2, etc.:
			halo="bridge_electricity-" + "$($count % 6 / 2 + 1)" + ".png"
			x,y=12,10
		[/item]
			
		[delay]
			time=50
		[/delay]
	[/do]
#enddef

	# In this event, a bridge is created that connects the flesh golem to the
	# outside world. Flashy effects accompany it.
	[event]
		name=moveto
		
		[filter]
			side=1
			x,y=7,8
		[/filter]
		
		# Remove the rune that activates the effect:
		[removeitem]
			x,y=7,8
		[/removeitem]

		# Initialize some loop variables:
		[set_variable]
			name=size
			value=172
		[/set_variable]
		[set_variable]
			name=opacity
			value=0
		[/set_variable]
		[set_variable]
			name=count
			value=0
		[/set_variable]
		
		# Animate a light growing brighter where the bridge will be:
		[while]
			[variable]
				name=opacity
				less_than=100
			[/variable]
			{DO_BRIDGE_EFFECT 1}
		[/while]
		
		# Draw the bridge (currently hidden behind the light):
		[terrain]
			x=11, 12, 13
			y=10, 10, 11
			terrain=Qxu^Bs\
		[/terrain]
		[redraw]
			# The bridge won't show up yet without this.
 		[/redraw]
		
		# Animate the light disappearing (which reveals the bridge):
		[while]
			[variable]
				name=opacity
				greater_than=0
			[/variable]
			{DO_BRIDGE_EFFECT -1}
		[/while]

		# Remove the last of the halo effects:
		[removeitem]
			x,y=12,10
		[/removeitem]

		# Flip the golem to side 1:
		[store_unit]
			[filter]
				id=Flesh_Golem
			[/filter]
			variable=FG_stored
		[/store_unit]
		[set_variable]
			name=FG_stored.side
			value=1
		[/set_variable]
		[unstore_unit]
			variable=FG_stored
		[/unstore_unit]
		[redraw]
			# This is to register the team change immediately.
		[/redraw]

		[message]
			speaker=Flesh_Golem
			message= _ "Master, what do you command?"
		[/message]
		[message]
			speaker=Krag-Ubor
			message= _ "What? Uh...kill anyone I tell you to!"
		[/message]
		[message]
			speaker=Flesh_Golem
			message= _ "Yes, master."
		[/message]
		[message]
			speaker=Krag-Ubor
			message= _ "I like this thing!"
		[/message]
		
		# Clean up:
		[clear_variable]
			name=FG_stored
		[/clear_variable]
		[clear_variable]
			name=opacity
		[/clear_variable]
		[clear_variable]
			name=size
		[/clear_variable]
		[clear_variable]
			name=count
		[/clear_variable]
		[clear_variable]
			name=number_of_bats
		[/clear_variable]
	[/event]
	
#undef DO_BRIDGE_EFFECT

	[event]
		name=enemies defeated
		
		[clear_variable]
			name=golem_seen
		[/clear_variable]
		[clear_variable]
			name=orcs_seen
		[/clear_variable]
		[endlevel]
			result=victory
			bonus=yes
			{NEW_GOLD_CARRYOVER 40}
		[/endlevel]
	[/event]

	{CLEAR_UNIT_LIMITS}
	{DEFEAT_EVENTS}
	
    [event]
		name=die
		[filter]
			id=Durguld
		[/filter]
    	[message]
			speaker=Krag-Ubor
			message= _ "Without Durguld, we'll never be able to find the dwarves."
		[/message]
		[endlevel]
			result=defeat
		[/endlevel]
	[/event]
[/scenario]