#textdomain wesnoth-The_Founding_of_Borstep

# These macros support a fourth difficulty level, NIGHTMARE:
# macro to define a 'quantity' differently based on difficulty levels
#define QUANTITY4 NAME EASY_VALUE NORMAL_VALUE HARD_VALUE NIGHTMARE_VALUE
#ifdef EASY
    {NAME}={EASY_VALUE}
#endif

#ifdef NORMAL
    {NAME}={NORMAL_VALUE}
#endif

#ifdef HARD
    {NAME}={HARD_VALUE}
#endif

#ifdef NIGHTMARE
    {NAME}={NIGHTMARE_VALUE}
#endif
#enddef

#macro to define number of turns for different difficulty levels
#define TURNS4 EASY_AMOUNT NORMAL_AMOUNT HARD_AMOUNT NIGHTMARE_AMOUNT
    {QUANTITY4 turns {EASY_AMOUNT} {NORMAL_AMOUNT} {HARD_AMOUNT} {NIGHTMARE_AMOUNT}}
#enddef

#macro which will let you go {GOLD w/x y z} to set
#the gold depending on newbie/easy/medium/hard - w/x/y/z

#define GOLD4 EASY_AMOUNT NORMAL_AMOUNT HARD_AMOUNT NIGHTMARE_AMOUNT
    {QUANTITY4 gold {EASY_AMOUNT} {NORMAL_AMOUNT} {HARD_AMOUNT} {NIGHTMARE_AMOUNT}}
#enddef

#define INCOME4 EASY_AMOUNT NORMAL_AMOUNT HARD_AMOUNT NIGHTMARE_AMOUNT
    {QUANTITY4 income {EASY_AMOUNT} {NORMAL_AMOUNT} {HARD_AMOUNT} {NIGHTMARE_AMOUNT}}
#enddef

# I use the limit macros enough that most of these will apply to most scenarios:
#define CLEAR_UNIT_LIMITS
	[event]
		name=victory

		[clear_variable]
			name=side_2_limited_recruits
		[/clear_variable]
		[clear_variable]
			name=side_2_limited_recruits_length
		[/clear_variable]
		[clear_variable]
			name=side_3_limited_recruits
		[/clear_variable]
		[clear_variable]
			name=side_3_limited_recruits_length
		[/clear_variable]
		[clear_variable]
			name=side_4_limited_recruits
		[/clear_variable]
		[clear_variable]
			name=side_4_limited_recruits_length
		[/clear_variable]
	[/event]
#enddef

#define SIDE_1
	side=1
	controller=human
	user_team_name= _ "Orcs"
	team_name=orcs
	
	type=Grunt Leader
	id=Krag-Ubor
	name=Krag-Ubor
	canrecruit=yes
	unrenamable=yes
	profile=portraits/orcs/transparent/grunt-3.png

	[modifications]
		{TRAIT_STRONG}
		{TRAIT_RESILIENT}
	[/modifications]
	
	recruit=Orcish Grunt, Goblin Spearman, Wolf Rider, Orcish Archer, Orcish Shaman, Orcish Assassin
#enddef

#define RECALL_LOYAL_UNITS
    [recall]
        id=Varlag
    [/recall]
    [recall]
        id=Erogrik
    [/recall]
    [recall]
		id=Durguld
	[/recall]
	[recall]
		id=Flesh_Golem
	[/recall]
#enddef

#define HOW_TO_LOSE
    [objective]
        description= _ "Death of Krag-Ubor"
        condition=lose
    [/objective]
    [objective]
        description= _ "Run out of Turns"
        condition=lose
    [/objective]
#enddef

#define HOW_TO_LOSE_2
    [objective]
        description= _ "Death of Krag-Ubor"
        condition=lose
    [/objective]
    [objective]
        description= _ "Death of Durguld"
        condition=lose
    [/objective]
    [objective]
        description= _ "Run out of turns"
        condition=lose
    [/objective]
#enddef

#define DEFEAT_EVENTS
    [event]
        name=die
        [filter]
            id=Krag-Ubor
        [/filter]
        [endlevel]
            result=defeat
        [/endlevel]
    [/event]
    
    [event]
    	name=time over
    	[message]
			speaker=narrator
			message= _ "With their momentum lost, the orcs descend into pointless squabling no matter how many of them you punish."
			image=wesnoth-icon.png
		[/message]
    [/event]
#enddef

# This macro adds a variable to the unit that shouldn't move.
# (USE_FROZEN_UNITS must be called first for this to do anything.)
#define FREEZE_UNIT ID
	[store_unit]
		[filter]
			id={ID}
		[/filter]
		variable=stored_unit
	[/store_unit]
	
	[set_variable]
		name=stored_unit.variables.frozen
		value=yes
	[/set_variable]
	
	[unstore_unit]
		variable=stored_unit
	[/unstore_unit]
	[clear_variable]
		name=stored_unit
	[/clear_variable]
#enddef

# This macro does the same as the one above, but is for use in a unit definition.
#define FREEZE_THIS_UNIT
	[variables]
		frozen=yes
	[/variables]
#enddef

# This macro thaws all units of a certain type, assuming that they were created
# with ID's that put them in a group. (For example: Guard_1, Guard_2, and
# Guard_3 can be thawed with {THAW_UNITS Guard}.)
#define THAW_UNITS ID_CONTAINS
	[store_unit]
		[filter]
			[filter_wml]
				[variables]
					frozen=yes
				[/variables]
			[/filter_wml]
		[/filter]
		variable=frozen_units
	[/store_unit]
	
	{FOREACH frozen_units unit}
		[if]
			[variable]
				name=frozen_units[$unit].id
				contains={ID_CONTAINS}
			[/variable]

			[then]
				[set_variable]
					name=frozen_units[$unit].variables.frozen
					value=no
				[/set_variable]
				
				[unstore_unit]
					variable=frozen_units[$unit]
				[/unstore_unit]
			[/then]
		[/if]
	{NEXT unit}

	[clear_variable]
		name=frozen_units
	[/clear_variable]
#enddef

# Usually the macro above will work just as well as this one, but in some cases
# it will not. (For example: Trying to thaw just "Guard_1" with the above macro
# would also thaw "Guard_12".)
#define THAW_UNIT ID
	[store_unit]
		[filter]
			id={ID}
		[/filter]
		variable=stored_unit
	[/store_unit]
	
	[set_variable]
		name=stored_unit.variables.frozen
		value=no
	[/set_variable]
	
	[unstore_unit]
		variable=stored_unit
	[/unstore_unit]
	[clear_variable]
		name=stored_unit
	[/clear_variable]
#enddef

# This macro defines the event that keeps units frozen. On each turn, it removes
# movement points from all units that have a "frozen" variable set to "yes".
#define USE_FROZEN_UNITS
	[event]
		name=turn refresh
		first_time_only=no
		
		[store_unit]
			[filter]
				[filter_wml]
					[variables]
						frozen=yes
					[/variables]
				[/filter_wml]
			[/filter]
			variable=frozen_units
		[/store_unit]
		
		{FOREACH frozen_units unit}
			[set_variable]
				name=frozen_units[$unit].moves
				value=0
			[/set_variable]
			
			[unstore_unit]
				variable=frozen_units[$unit]
			[/unstore_unit]
		{NEXT unit}

		[clear_variable]
			name=frozen_units
		[/clear_variable]

	[/event]
#enddef

# Finds the nearest unit to X, Y that matches FILTER and stores it in VARIABLE
#define NEAREST_UNIT X Y FILTER VARIABLE
    [set_variable]
        name=distance
        value=0
    [/set_variable]

    [set_variable]
        name=unit_found
        value=no
    [/set_variable]

	# Store matching units within a radius of "distance". If nothing got stored,
	# add one to "distance" and try again. Do this until a unit is found, or
	# "distance" goes over the max.
    [while]
        [variable]
            name=unit_found
            equals=no
        [/variable]
        [and]
            [variable]
                name=distance
                less_than_equal_to=99  # max
            [/variable]
        [/and]

        [do]

			[store_unit]
				[filter]
					{FILTER}
					[and]
						[not]
							x={X}
							y={Y}
						[/not]
						[not]
							id=$last_unit_id
						[/not]
						[not]  # This is being used to find a generic unit.
								  # Varlag isn't really generic enough.
							id=Varlag
						[/not]
						[filter_location]
							x={X}
							y={Y}
							radius=$distance
						[/filter_location]
					[/and]
                [/filter]
                variable={VARIABLE}
            [/store_unit]

            [if]
                [variable]
                    name={VARIABLE}.length
                    greater_than=0
                [/variable]
                [then]
                    [set_variable]
                        name=unit_found
                        value=yes
                    [/set_variable]
                [/then]
            [/if]

            [set_variable]
                name=distance
                add=1
            [/set_variable]
        [/do]
    [/while]

    [clear_variable]
        name=distance
    [/clear_variable]

    [clear_variable]
        name=unit_found
    [/clear_variable]
#enddef

# This macro puts a unit back on the recall list.
#define UNRECALL ID
	[store_unit]
		[filter]
			id={ID}
		[/filter]
		variable=stored_unit
		kill=yes  # Otherwise, you make a copy!
		animate=no
	[/store_unit]
	
	[set_variable]
		name=stored_unit.x
		value=recall
	[/set_variable]
	[set_variable]
		name=stored_unit.y
		value=recall
	[/set_variable]
	
	[unstore_unit]
		variable=stored_unit
	[/unstore_unit]
	
	[clear_variable]
		name=stored_unit
	[/clear_variable]
#enddef

# This macro improves the weapons of one orc.
#define GIVE_DWARVISH_WEAPON ID

	# Create an array that defines which weapons will be changed:
	[set_variables]
		name=weapons
		mode=replace
		[split]
			list=sword,greatsword,short sword,dagger,throwing knives,spear
			key=name
			separator=,
		[/split]
	[/set_variables]
	
	# Add to the array the amount of improvement that each weapon type will get:
	[set_variables]
		name=weapons
		mode=merge
		[split]
			list=2,2,2,1,1,1
			key=increase
			separator=,
		[/split]
	[/set_variables]

	[store_unit]
		[filter]
			id={ID}
		[/filter]
		variable=stored_unit
	[/store_unit]

	# Loop through each type of weapon from the array:
	{FOREACH weapons weapon}
		# Loop through each weapon (AKA attack) the unit has, and see if it
		# matches the current weapon from the outer loop:
		{FOREACH stored_unit.attack attack}
			[if]
				# If this is true, one of the orc's weapons is of a type that can
				# be improved:
				[variable]
					name=stored_unit.attack[$attack].name
					equals=$weapons[$weapon].name
				[/variable]
				
				# Rename the weapon, and increase its damage by the proper amount:
				[then]
					[object]
						[effect]
							apply_to=attack
							name=$weapons[$weapon].name
							set_name="Dwarvish $weapons[$weapon].name"
							set_description= _ "Dwarvish $weapons[$weapon].name"
							increase_damage=$weapons[$weapon].increase
						[/effect]
						[filter]
							id={ID}
						[/filter]
						silent=yes
					[/object]
				[/then]
			[/if]
		{NEXT attack}
	{NEXT weapon}
	
	[clear_variable]
		name=stored_unit
	[/clear_variable]
	[clear_variable]
		name=weapons
	[/clear_variable]
#enddef

#define PLAYLIST
[music]
    name=the_dangerous_symphony.ogg
    ms_before=3000
    append=yes
[/music]
[music]
    name=vengeful.ogg
    ms_before=3000
    append=yes
[/music]
[music]
    name=siege_of_laurelmor.ogg
    ms_before=3000
    append=yes
[/music]
[music]
    name=the_deep_path.ogg
    ms_before=3000
    append=yes
[/music]
[music]
    name=casualties_of_war.ogg
    ms_before=3000
    append=yes
[/music]
[music]
    name=into_the_shadows.ogg
    ms_before=3000
    append=yes
[/music]
[music]
    name=the_city_falls.ogg
    ms_before=3000
    append=yes
[/music]
[music]
    name=battle.ogg
    ms_before=3000
    append=yes
[/music]
#enddef